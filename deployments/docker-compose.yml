version: '3.8'

services:
  # --- Ваше приложение ---
  pvz-app:
    build:
      context: .. # Контекст сборки - корневая папка проекта
      dockerfile: deployments/Dockerfile # Путь к Dockerfile приложения
    container_name: pvz-app
    ports:
      - "8080:8080" # Основной порт API
      - "9000:9000" # Порт для Prometheus метрик
      - "3000:3000" # Порт gRPC
    depends_on:
      db:
        condition: service_healthy # Запускать только после того, как БД будет готова
    environment:
      # Переменные окружения для подключения к БД
      DB_HOST: db                 # Имя сервиса БД в docker-compose
      DB_PORT: 5432               # Стандартный порт Postgres внутри сети Docker
      DB_USER: user               # Имя пользователя БД
      DB_PASSWORD: password         # Пароль пользователя БД
      DB_NAME: pvzdb              # Имя базы данных
      # Секрет для JWT
      JWT_SECRET: your-very-secure-secret-key-for-testing # !!! ЗАМЕНИТЕ НА ВАШ СЕКРЕТ !!!
      # Порты для самого приложения (если читаются из env)
      PORT: 8080                  # Порт для HTTP API
      METRICS_PORT: 9000          # Порт для метрик
      GRPC_PORT: 3000             # Порт для gRPC
    restart: unless-stopped

  # --- База данных PostgreSQL ---
  db:
    image: postgres:15-alpine # Рекомендуется использовать конкретную версию
    container_name: db
    environment:
      POSTGRES_USER: user         # Задает имя суперпользователя и БД по умолчанию, если не задано POSTGRES_DB
      POSTGRES_PASSWORD: password   # Пароль для суперпользователя
      POSTGRES_DB: pvzdb        # Имя базы данных для создания
    ports:
      - "5433:5432" # Проброс порта для внешнего доступа (например, DBeaver), внешний 5433 -> внутренний 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data # Сохранение данных БД между перезапусками
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d pvzdb"] # Проверка готовности БД
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # --- Сервис для запуска миграций ---
  migrate:
    image: migrate/migrate:v4.17.1 # Используйте нужную версию migrate
    container_name: migrate
    volumes:
      - ../migrations:/migrations # Монтируем локальную папку migrations внутрь контейнера
    # Команда запускается при старте docker-compose (или вручную через docker-compose run)
    # Здесь команда для примера. Часто миграции запускают отдельной командой.
    # Если нужно запускать автоматически при старте, можно использовать command:
    # command: ["-path", "/migrations", "-database",  "postgres://user:password@db:5432/pvzdb?sslmode=disable", "up"]
    # Но лучше запускать 'docker-compose run migrate -path /migrations -database postgres://user:password@db:5432/pvzdb?sslmode=disable up'
    entrypoint: ["migrate"] # Можно оставить пустым, если команда передается при запуске
    depends_on:
      - db # Запускать строго после базы данных

  # --- Prometheus для сбора метрик ---
  prometheus:
    image: prom/prometheus:v2.45.0 # Используйте актуальную версию
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Монтируем локальный конфиг Prometheus
      # Опционально: том для хранения данных Prometheus
      # - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Позволяет перезагружать конфиг через API
    ports:
      - "9090:9090" # Веб-интерфейс Prometheus
    restart: unless-stopped
    depends_on: # Prometheus должен стартовать после сервисов, с которых собирает метрики
      - pvz-app
      - node-exporter
      - postgres-exporter

  # --- Node Exporter для метрик хоста/контейнеров ---
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports: # Можно использовать expose, если доступ извне не нужен
      - "9100:9100"
    restart: unless-stopped

  # --- Postgres Exporter для метрик PostgreSQL ---
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    environment:
      # ВАЖНО: Используйте те же креды, что и для pvz-app и db
      DATA_SOURCE_NAME: "postgresql://user:password@db:5432/pvzdb?sslmode=disable"
    ports: # Можно использовать expose
      - "9187:9187"
    restart: unless-stopped
    depends_on:
      - db

  # --- Grafana для визуализации метрик ---
  grafana:
    image: grafana/grafana-oss:10.4.2
    container_name: grafana
    ports:
      - "3001:3000" # Веб-интерфейс Grafana (используем 3001, т.к. 3000 занят gRPC у pvz-app)
    volumes:
      - grafana_data:/var/lib/grafana # Сохранение данных Grafana
    restart: unless-stopped
    environment:
      # Пароль администратора по умолчанию. Рекомендуется сменить.
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

# --- Именованные тома ---
volumes:
  postgres_data: {} # Docker сам управляет этим томом
  grafana_data: {}  # Docker сам управляет этим томом
  # prometheus_data: {} # Если нужно сохранять данные Prometheus