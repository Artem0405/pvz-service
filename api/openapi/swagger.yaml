openapi: 3.0.0
info:
  title: backend service
  description: Сервис для управления ПВЗ и приемкой товаров
  version: 1.0.0

# Добавляем секцию servers для удобства тестирования в Swagger UI/Postman
servers:
  - url: http://localhost:8080 # URL вашего запущенного сервиса
    description: Локальный сервер разработки

components:
  schemas:
    Token:
      description: JWT токен доступа
      type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    User:
      description: Данные пользователя (без хеша пароля)
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя
          readOnly: true # ID генерируется сервером
        email:
          type: string
          format: email
          description: Email пользователя (уникальный)
        role:
          $ref: '#/components/schemas/UserRole' # Ссылка на Enum
      required: [email, role]

    UserRole: # Выносим Enum в отдельную схему
      type: string
      description: Роль пользователя в системе
      enum: [employee, moderator]
      example: employee

    PVZ:
      description: Пункт выдачи заказов
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор ПВЗ
          readOnly: true # ID генерируется сервером
        registrationDate:
          type: string
          format: date-time
          description: Дата и время регистрации ПВЗ
          readOnly: true # Устанавливается сервером
        city:
          $ref: '#/components/schemas/PVZCity' # Ссылка на Enum
      required: [city] # Только город обязателен при создании

    PVZCity: # Выносим Enum в отдельную схему
      type: string
      description: Город расположения ПВЗ
      enum: [Москва, Санкт-Петербург, Казань]
      example: Москва

    Reception:
      description: Запись о приемке товаров
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор приемки
          readOnly: true
        dateTime:
          type: string
          format: date-time
          description: Дата и время начала приемки
          readOnly: true
        pvzId:
          type: string
          format: uuid
          description: ID пункта выдачи заказов, к которому относится приемка
        status:
          $ref: '#/components/schemas/ReceptionStatus' # Ссылка на Enum
      # Убрали required, т.к. при ответе все поля будут, а при запросе - нет
      # required: [dateTime, pvzId, status]

    ReceptionStatus: # Выносим Enum в отдельную схему
      type: string
      description: Статус приемки товаров
      enum: [in_progress, closed]
      example: in_progress

    Product:
      description: Товар, принятый в ПВЗ
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор товара
          readOnly: true
        dateTimeAdded:
          type: string
          format: date-time
          description: Дата и время добавления товара в приемку
          readOnly: true
        type:
          $ref: '#/components/schemas/ProductType' # Ссылка на Enum
        receptionId:
          type: string
          format: uuid
          description: ID приемки, к которой относится товар
      # Убрали required
      # required: [type, receptionId]

    ProductType: # Выносим Enum в отдельную схему
      type: string
      description: Тип товара
      enum: [электроника, одежда, обувь]
      example: одежда

    Error:
      description: Стандартный ответ с ошибкой
      type: object
      properties:
        message:
          type: string
          description: Текстовое описание ошибки
      required: [message]

    # --- Схемы для составных ответов ---
    ProductInfo:
      description: Краткая информация о товаре в рамках ответа списка ПВЗ
      allOf:
        - $ref: '#/components/schemas/Product'

    ReceptionInfo:
      description: Информация о приемке, включая список товаров, для ответа списка ПВЗ
      type: object
      properties:
        reception:
          $ref: '#/components/schemas/Reception'
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductInfo'
      required:
        - reception
        - products

    PvzListItem: # Элемент списка ПВЗ
      description: Один элемент в списке ПВЗ, включая ПВЗ и его приемки
      type: object
      properties:
        pvz:
          $ref: '#/components/schemas/PVZ'
        receptions:
          type: array
          items:
            $ref: '#/components/schemas/ReceptionInfo'
      required:
        - pvz
        - receptions

    # --- ИЗМЕНЕНО: Схема ответа для GET /pvz с Keyset Pagination ---
    PvzListResponseKeyset:
      description: Ответ со списком ПВЗ и курсором для следующей страницы
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PvzListItem' # Ссылка на элемент списка
        next_after_registration_date: # Курсор для следующего запроса
          type: string
          format: date-time
          nullable: true # Будет null, если это последняя страница
          description: "Курсор для следующей страницы: registration_date последнего элемента"
        next_after_id: # Курсор для следующего запроса
          type: string
          format: uuid
          nullable: true # Будет null, если это последняя страница
          description: "Курсор для следующей страницы: id последнего элемента"
      required:
        - items
        # next_after поля не обязательны, они null на последней странице

    # --- Схемы для тел запросов ---
    RegisterUserRequest:
      # ... без изменений ...
      description: Данные для регистрации нового пользователя
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password # Указываем формат для ясности
        role:
          $ref: '#/components/schemas/UserRole' # Ссылка на Enum
      required: [email, password, role]

    LoginUserRequest:
      # ... без изменений ...
      description: Данные для входа пользователя
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [email, password]

    DummyLoginRequest:
      # ... без изменений ...
      description: Запрос для получения тестового токена
      type: object
      properties:
        role:
          $ref: '#/components/schemas/UserRole'
      required: [role]

    InitiateReceptionRequest:
      # ... без изменений ...
      description: Запрос на инициацию новой приемки
      type: object
      properties:
        pvzId:
          type: string
          format: uuid
          description: ID ПВЗ, для которого создается приемка
      required: [pvzId]

    AddProductRequest:
      # ... без изменений ...
      description: Запрос на добавление товара в приемку
      type: object
      properties:
        pvzId:
          type: string
          format: uuid
          description: ID ПВЗ, в котором находится активная приемка
        type:
          $ref: '#/components/schemas/ProductType'
      required: [pvzId, type]

    MessageResponse:
      # ... без изменений ...
      type: object
      properties:
        message:
          type: string
      required:
        - message

  securitySchemes:
    bearerAuth: # ... без изменений ...
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен доступа, полученный через /login или /dummyLogin

paths:
  /dummyLogin: # ... без изменений ...
    post:
      summary: Получение тестового токена
      operationId: postDummyLogin
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DummyLoginRequest'
      responses:
        '200':
          description: Успешная авторизация, возвращен токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Неверный запрос (например, невалидная роль)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register: # ... без изменений ...
    post:
      summary: Регистрация пользователя
      operationId: postRegister
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неверный запрос (невалидные данные)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Пользователь с таким email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login: # ... без изменений ...
    post:
      summary: Авторизация пользователя
      operationId: postLogin
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        '200':
          description: Успешная авторизация, возвращен токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Неверные учетные данные (email или пароль)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pvz:
    post: # ... без изменений ...
      summary: Создание ПВЗ (только для модераторов)
      operationId: postPvz
      tags: [PVZ]
      security:
        - bearerAuth: []
      requestBody:
        description: Данные для создания нового ПВЗ (только город)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PVZ'
      responses:
        '201':
          description: ПВЗ успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PVZ'
        '400':
          description: Неверный запрос (например, недопустимый город)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # --- ИЗМЕНЕНО: GET /pvz ---
    get:
      summary: Получение списка ПВЗ с деталями (keyset pagination)
      description: Получение списка ПВЗ с использованием keyset пагинации. Включает информацию о приемках и товарах. Фильтры по дате приемки остаются.
      operationId: getPvzListKeyset # Изменили ID операции
      tags:
        - PVZ
      security:
        - bearerAuth: [] # Защищаем эндпоинт
      parameters:
        # --- Фильтры по дате (остаются) ---
        - name: startDate
          in: query
          description: Начальная дата диапазона (фильтр для приемок)
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Конечная дата диапазона (фильтр для приемок)
          required: false
          schema:
            type: string
            format: date-time
        # --- Параметры Keyset Pagination ---
        - name: limit
          in: query
          description: Количество элементов на странице
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 30
            default: 10
        - name: after_registration_date # Новый параметр
          in: query
          description: "Курсор: Дата регистрации последнего элемента предыдущей страницы (RFC3339)"
          required: false
          schema:
            type: string
            format: date-time
        - name: after_id # Новый параметр
          in: query
          description: "Курсор: ID последнего элемента предыдущей страницы (для уникальности)"
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешный ответ со списком ПВЗ и курсором для следующей страницы
          content:
            application/json:
              schema:
                # Ссылка на НОВУЮ схему ответа
                $ref: '#/components/schemas/PvzListResponseKeyset'
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400': # Оставляем для невалидных дат или курсоров
          description: Неверный запрос (например, невалидный формат даты/UUID курсора)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # --- Остальные эндпоинты без изменений ---
  /pvz/{pvzId}/close_last_reception: # ... без изменений ...
    post:
      summary: Закрытие последней открытой приемки
      operationId: postCloseLastReception
      tags: [Receptions]
      security:
      - bearerAuth: []
      parameters:
        - name: pvzId
          in: path
          required: true
          description: ID ПВЗ, для которого закрывается приемка
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Приемка успешно закрыта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reception' 
        '400':
          description: Неверный запрос (нет открытой приемки, неверный pvzId)
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/Error' 
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error' 

  /pvz/{pvzId}/delete_last_product: # ... без изменений ...
    post:
      summary: Удаление последнего добавленного товара
      description: Удаляет последний добавленный товар из последней открытой приемки для указанного ПВЗ (LIFO).
      operationId: postDeleteLastProduct
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - name: pvzId
          in: path
          required: true
          description: ID ПВЗ, из приемки которого удаляется товар
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Товар успешно удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Неверный запрос (нет активной приемки, нет товаров, неверный pvzId)
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error' 
        '401':
          description: Неавторизован
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error' 
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 

  /receptions: # ... без изменений ...
    post:
      summary: Инициировать новую приемку товаров
      operationId: postReceptions
      tags: [Receptions]
      security: # <-- Исправили на правильный синтаксис?
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/InitiateReceptionRequest' 
      responses:
        '201':
          description: Приемка успешно создана
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Reception' 
        '400':
          description: Неверный запрос (например, уже есть незакрытая приемка)
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error' 
        '401':
          description: Неавторизован
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Error' 
        '403': # <-- Строка ~465 должна быть где-то здесь или чуть ниже
          description: Доступ запрещен
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error' 

  /products: # ... без изменений ...
    post:
      summary: Добавление товара в текущую приемку
      operationId: postProducts
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/AddProductRequest' 
      responses:
        '201':
          description: Товар успешно добавлен
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Product' 
        '400':
          description: Неверный запрос (нет активной приемки, неверный тип товара или pvzId)
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error' 
        '401':
          description: Неавторизован
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Error' 