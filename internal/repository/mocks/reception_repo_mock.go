// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Artem0405/pvz-service/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ReceptionRepository is an autogenerated mock type for the ReceptionRepository type
type ReceptionRepository struct {
	mock.Mock
}

// AddProductToReception provides a mock function with given fields: ctx, product
func (_m *ReceptionRepository) AddProductToReception(ctx context.Context, product domain.Product) (uuid.UUID, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for AddProductToReception")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) (uuid.UUID, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) uuid.UUID); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseReceptionByID provides a mock function with given fields: ctx, receptionID
func (_m *ReceptionRepository) CloseReceptionByID(ctx context.Context, receptionID uuid.UUID) error {
	ret := _m.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for CloseReceptionByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, receptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReception provides a mock function with given fields: ctx, reception
func (_m *ReceptionRepository) CreateReception(ctx context.Context, reception domain.Reception) (uuid.UUID, error) {
	ret := _m.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Reception) (uuid.UUID, error)); ok {
		return rf(ctx, reception)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Reception) uuid.UUID); ok {
		r0 = rf(ctx, reception)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Reception) error); ok {
		r1 = rf(ctx, reception)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductByID provides a mock function with given fields: ctx, productID
func (_m *ReceptionRepository) DeleteProductByID(ctx context.Context, productID uuid.UUID) error {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastOpenReceptionByPVZ provides a mock function with given fields: ctx, pvzID
func (_m *ReceptionRepository) GetLastOpenReceptionByPVZ(ctx context.Context, pvzID uuid.UUID) (domain.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastOpenReceptionByPVZ")
	}

	var r0 domain.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Get(0).(domain.Reception)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastProductFromReception provides a mock function with given fields: ctx, receptionID
func (_m *ReceptionRepository) GetLastProductFromReception(ctx context.Context, receptionID uuid.UUID) (domain.Product, error) {
	ret := _m.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProductFromReception")
	}

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.Product, error)); ok {
		return rf(ctx, receptionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Product); ok {
		r0 = rf(ctx, receptionID)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, receptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProductsByReceptionIDs provides a mock function with given fields: ctx, receptionIDs
func (_m *ReceptionRepository) ListProductsByReceptionIDs(ctx context.Context, receptionIDs []uuid.UUID) ([]domain.Product, error) {
	ret := _m.Called(ctx, receptionIDs)

	if len(ret) == 0 {
		panic("no return value specified for ListProductsByReceptionIDs")
	}

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]domain.Product, error)); ok {
		return rf(ctx, receptionIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []domain.Product); ok {
		r0 = rf(ctx, receptionIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, receptionIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceptionsByPVZIDs provides a mock function with given fields: ctx, pvzIDs, startDate, endDate
func (_m *ReceptionRepository) ListReceptionsByPVZIDs(ctx context.Context, pvzIDs []uuid.UUID, startDate *time.Time, endDate *time.Time) ([]domain.Reception, error) {
	ret := _m.Called(ctx, pvzIDs, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for ListReceptionsByPVZIDs")
	}

	var r0 []domain.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, *time.Time, *time.Time) ([]domain.Reception, error)); ok {
		return rf(ctx, pvzIDs, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, *time.Time, *time.Time) []domain.Reception); ok {
		r0 = rf(ctx, pvzIDs, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, pvzIDs, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReceptionRepository creates a new instance of ReceptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionRepository {
	mock := &ReceptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
