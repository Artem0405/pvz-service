// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PVZCity.
const (
	Казань         PVZCity = "Казань"
	Москва         PVZCity = "Москва"
	СанктПетербург PVZCity = "Санкт-Петербург"
)

// Defines values for ProductType.
const (
	Обувь       ProductType = "обувь"
	Одежда      ProductType = "одежда"
	Электроника ProductType = "электроника"
)

// Defines values for ReceptionStatus.
const (
	Closed     ReceptionStatus = "closed"
	InProgress ReceptionStatus = "in_progress"
)

// Defines values for UserRole.
const (
	Employee  UserRole = "employee"
	Moderator UserRole = "moderator"
)

// AddProductRequest Запрос на добавление товара в приемку
type AddProductRequest struct {
	// PvzId ID ПВЗ, в котором находится активная приемка
	PvzId openapi_types.UUID `json:"pvzId"`

	// Type Тип товара
	Type ProductType `json:"type"`
}

// DummyLoginRequest Запрос для получения тестового токена
type DummyLoginRequest struct {
	// Role Роль пользователя в системе
	Role UserRole `json:"role"`
}

// Error Стандартный ответ с ошибкой
type Error struct {
	// Message Текстовое описание ошибки
	Message string `json:"message"`
}

// InitiateReceptionRequest Запрос на инициацию новой приемки
type InitiateReceptionRequest struct {
	// PvzId ID ПВЗ, для которого создается приемка
	PvzId openapi_types.UUID `json:"pvzId"`
}

// LoginUserRequest Данные для входа пользователя
type LoginUserRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	Message string `json:"message"`
}

// PVZ Пункт выдачи заказов
type PVZ struct {
	// City Город расположения ПВЗ
	City PVZCity `json:"city"`

	// Id Уникальный идентификатор ПВЗ
	Id *openapi_types.UUID `json:"id,omitempty"`

	// RegistrationDate Дата и время регистрации ПВЗ
	RegistrationDate *time.Time `json:"registrationDate,omitempty"`
}

// PVZCity Город расположения ПВЗ
type PVZCity string

// Product Товар, принятый в ПВЗ
type Product struct {
	// DateTimeAdded Дата и время добавления товара в приемку
	DateTimeAdded *time.Time `json:"dateTimeAdded,omitempty"`

	// Id Уникальный идентификатор товара
	Id *openapi_types.UUID `json:"id,omitempty"`

	// ReceptionId ID приемки, к которой относится товар
	ReceptionId *openapi_types.UUID `json:"receptionId,omitempty"`

	// Type Тип товара
	Type *ProductType `json:"type,omitempty"`
}

// ProductInfo Товар, принятый в ПВЗ
type ProductInfo = Product

// ProductType Тип товара
type ProductType string

// PvzListItem Один элемент в списке ПВЗ, включая ПВЗ и его приемки
type PvzListItem struct {
	// Pvz Пункт выдачи заказов
	Pvz        PVZ             `json:"pvz"`
	Receptions []ReceptionInfo `json:"receptions"`
}

// PvzListResponseKeyset Ответ со списком ПВЗ и курсором для следующей страницы
type PvzListResponseKeyset struct {
	Items []PvzListItem `json:"items"`

	// NextAfterId Курсор для следующей страницы: id последнего элемента
	NextAfterId *openapi_types.UUID `json:"next_after_id"`

	// NextAfterRegistrationDate Курсор для следующей страницы: registration_date последнего элемента
	NextAfterRegistrationDate *time.Time `json:"next_after_registration_date"`
}

// Reception Запись о приемке товаров
type Reception struct {
	// DateTime Дата и время начала приемки
	DateTime *time.Time `json:"dateTime,omitempty"`

	// Id Уникальный идентификатор приемки
	Id *openapi_types.UUID `json:"id,omitempty"`

	// PvzId ID пункта выдачи заказов, к которому относится приемка
	PvzId *openapi_types.UUID `json:"pvzId,omitempty"`

	// Status Статус приемки товаров
	Status *ReceptionStatus `json:"status,omitempty"`
}

// ReceptionInfo Информация о приемке, включая список товаров, для ответа списка ПВЗ
type ReceptionInfo struct {
	Products []ProductInfo `json:"products"`

	// Reception Запись о приемке товаров
	Reception Reception `json:"reception"`
}

// ReceptionStatus Статус приемки товаров
type ReceptionStatus string

// RegisterUserRequest Данные для регистрации нового пользователя
type RegisterUserRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`

	// Role Роль пользователя в системе
	Role UserRole `json:"role"`
}

// Token JWT токен доступа
type Token = string

// User Данные пользователя (без хеша пароля)
type User struct {
	// Email Email пользователя (уникальный)
	Email openapi_types.Email `json:"email"`

	// Id Уникальный идентификатор пользователя
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Role Роль пользователя в системе
	Role UserRole `json:"role"`
}

// UserRole Роль пользователя в системе
type UserRole string

// GetPvzListKeysetParams defines parameters for GetPvzListKeyset.
type GetPvzListKeysetParams struct {
	// StartDate Начальная дата диапазона (фильтр для приемок)
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Конечная дата диапазона (фильтр для приемок)
	EndDate *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`

	// Limit Количество элементов на странице
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// AfterRegistrationDate Курсор: Дата регистрации последнего элемента предыдущей страницы (RFC3339)
	AfterRegistrationDate *time.Time `form:"after_registration_date,omitempty" json:"after_registration_date,omitempty"`

	// AfterId Курсор: ID последнего элемента предыдущей страницы (для уникальности)
	AfterId *openapi_types.UUID `form:"after_id,omitempty" json:"after_id,omitempty"`
}

// PostDummyLoginJSONRequestBody defines body for PostDummyLogin for application/json ContentType.
type PostDummyLoginJSONRequestBody = DummyLoginRequest

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginUserRequest

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody = AddProductRequest

// PostPvzJSONRequestBody defines body for PostPvz for application/json ContentType.
type PostPvzJSONRequestBody = PVZ

// PostReceptionsJSONRequestBody defines body for PostReceptions for application/json ContentType.
type PostReceptionsJSONRequestBody = InitiateReceptionRequest

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterUserRequest
